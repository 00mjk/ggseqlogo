}
names(li2)
source('/Volumes/dg-shared/for_omar/scripts/asb_benchmark/asb_auc.r')
source('/Volumes/dg-shared/for_omar/scripts/asb_benchmark/asb_auc.r')
head(li2[[1]])
source('/Volumes/dg-shared/for_omar/scripts/asb_benchmark/asb_auc.r')
x = li2$`max_p - max_ploss_pgain`
x$BATF
source('/Volumes/dg-shared/for_omar/scripts/asb_benchmark/asb_auc.r')
source('/Volumes/dg-shared/for_omar/scripts/asb_benchmark/asb_auc.r')
all_tfs[1]
tf = 'BATF'
z =lapply(roc_data, function(X) prediction(X[[tf]]$pred, X[[tf]]$label) )
x =
lapply(roc_data_bytf, function(X) prediction(X[[tf]]$pred, X[[tf]]$label) )
x[[1]]
source('/Volumes/dg-shared/for_omar/scripts/plot_functions.r')
ggROCR(x)
head(li[[1]])
df = li[[1]]
sig = subset(df, signif_asb)
head(sig)
table(sig$tf)
sort(table(sig$tf))
all_tfs = table(li[[1]]$tf)
all_tfs
tf_count = table(li[[1]]$tf)
tf_count
z = subset(li[[1]], signif_asb)
z = subset(li[[1]], signif_asb)
tf_count = table(z$tf)
tf_count
tf_count = table(z$tf)
all_tfs = names( which(tf_count >= 10) )
all_tfs
pred_lists_bytf = lapply(all_tfs, function(tf){
lapply(roc_data_bytf, function(X) prediction(X[[tf]]$pred, X[[tf]]$label) )
})
source('/Volumes/dg-shared/for_omar/scripts/plot_functions.r')
ggROCR(x)
source('/Volumes/dg-shared/for_omar/scripts/plot_functions.r')
ggROCR(x)
source('/Volumes/dg-shared/for_omar/scripts/plot_functions.r')
ggROCR(x)
source('/Volumes/dg-shared/for_omar/scripts/plot_functions.r')
ggROCR(x)
source('/Volumes/dg-shared/for_omar/scripts/plot_functions.r')
ggROCR(x)
source('/Volumes/dg-shared/for_omar/scripts/plot_functions.r')
ggROCR(x)
source('/Volumes/dg-shared/for_omar/scripts/plot_functions.r')
ggROCR(x)
source('/Volumes/dg-shared/for_omar/scripts/plot_functions.r')
ggROCR(x)
source('/Volumes/dg-shared/for_omar/scripts/plot_functions.r')
ggROCR(x)
pred_lists_bytf = lapply(all_tfs, function(tf){
lapply(roc_data_bytf, function(X) prediction(X[[tf]]$pred, X[[tf]]$label) )
})
pred_lists_bytf = lapply(all_tfs, function(tf){
lapply(roc_data_bytf, function(X) prediction(X[[tf]]$pred, X[[tf]]$label) )
})
names(pred_lists_bytf) = all_tfs
tf = 'CTCF'
print(ggROCR( pred_lists_bytf[[tf]], main=tf ))
source('/Volumes/dg-shared/for_omar/scripts/asb_benchmark/asb_auc.r')
pdf('/dg-shared/for_omar/data/deepbind/alleledb/plots/roc_by_tf.pdf')
for(tf in names(pred_lists_bytf)){
message(tf)
main = sprintf('%s (%s ASBs)', tf, tf_count[tf])
print(ggROCR( pred_lists_bytf[[tf]], main=tf ))
}
dev.off()
# Save to PDF
pdf('/dg-shared/for_omar/data/deepbind/alleledb/plots/roc_by_tf.pdf', width=7)
for(tf in names(pred_lists_bytf)){
message(tf)
main = sprintf('%s (%s ASBs)', tf, tf_count[tf])
print(ggROCR( pred_lists_bytf[[tf]], main=tf ))
}
dev.off()
mod2auc
x = readRDS('/dg-shared/for_omar/data/deepbind/alleledb/scored_tfs.rds')
x
head(x)
dim(x)
tf_count
length(tf_count)
dim(x)
z = subset(li[[1]], signif_asb)
tf_count = table(z$tf)
all_tfs = names( which(tf_count >= 10) )
tf_data = readRDS('/dg-shared/for_omar/data/deepbind/alleledb/scored_tfs.rds')
tf_label = with(tf_data, sprintf('%s (%s) AUC=%.3f, nASB=%s', tf, id, auc, tf_count))
tf_count
tf_label
message('-- generating rocr objects')
# Get TFs that have at least N significant ASBs
z = subset(li[[1]], signif_asb)
tf_count = table(z$tf)
all_tfs = names( which(tf_count >= 10) )
tf_data = readRDS('/dg-shared/for_omar/data/deepbind/alleledb/scored_tfs.rds')
tf_label = with(tf_data, sprintf('%s (%s) AUC=%.3f, nASB=%s', tf, id, auc, tf_count))
names(tf_label) = tf_data$tf
# Get list of prediction objects per TF
pred_lists_bytf = lapply(all_tfs, function(tf){
lapply(roc_data_bytf, function(X) prediction(X[[tf]]$pred, X[[tf]]$label) )
})
names(pred_lists_bytf) = all_tfs
# Save to PDF
pdf('/dg-shared/for_omar/data/deepbind/alleledb/plots/roc_by_tf.pdf', width=7)
for(tf in names(pred_lists_bytf)){
message(tf)
main = tf_label[ tf ]
print(ggROCR( pred_lists_bytf[[tf]], main=main ))
}
dev.off()
message('-- reading alleledb results')
paths = sprintf('/dg-shared/for_omar/data/deepbind/alleledb/results_clean/%s.rds', SCORE_METHODS)
li = lapply(paths, function(df){
df = lapply(df, function(x) x[!duplicated(x$snv_index),])
df = rbindlist( readRDS(df) )
df$label = df$signif_asb
df
})
#___________ROC plots for Allele DB_______________
message('-- reading alleledb results')
paths = sprintf('/dg-shared/for_omar/data/deepbind/alleledb/results_clean/%s.rds', SCORE_METHODS)
li = lapply(paths, function(p){
df = readRDS(df)
df = lapply(df, function(x) x[!duplicated(x$snv_index),])
df = rbindlist( df )
df$label = df$signif_asb
df
})
names(li) = SCORE_METHODS
paths
p = paths[1]
#___________ROC plots for Allele DB_______________
message('-- reading alleledb results')
paths = sprintf('/dg-shared/for_omar/data/deepbind/alleledb/results_clean/%s.rds', SCORE_METHODS)
li = lapply(paths, function(p){
df = readRDS(p)
df = lapply(df, function(x) x[!duplicated(x$snv_index),])
df = rbindlist( df )
df$label = df$signif_asb
df
})
names(li) = SCORE_METHODS
message('-- generating roc data')
roc_data_bytf = list()
for(method in SCORE_METHODS){
df = li[[method]]
z = comb[[method]]
if(z == 'max_ploss_pgain') df$max_ploss_pgain = pmax(df$ploss, df$pgain)
df$pred = df[[z]]
roc_data_bytf[[ paste(method, '-', z) ]] = split(df, df$tf)
}
message('-- generating rocr objects')
# Get TFs that have at least N significant ASBs
z = subset(li[[1]], signif_asb)
tf_count = table(z$tf)
all_tfs = names( which(tf_count >= 10) )
tf_data = readRDS('/dg-shared/for_omar/data/deepbind/alleledb/scored_tfs.rds')
tf_label = with(tf_data, sprintf('%s (%s) AUC=%.3f, nASB=%s', tf, id, auc, tf_count))
names(tf_label) = tf_data$tf
# Get list of prediction objects per TF
pred_lists_bytf = lapply(all_tfs, function(tf){
lapply(roc_data_bytf, function(X) prediction(X[[tf]]$pred, X[[tf]]$label) )
})
names(pred_lists_bytf) = all_tfs
# Save to PDF
pdf('/dg-shared/for_omar/data/deepbind/alleledb/plots/roc_by_tf.pdf', width=9)
for(tf in names(pred_lists_bytf)){
message(tf)
main = tf_label[ tf ]
print(ggROCR( pred_lists_bytf[[tf]], main=main ))
}
dev.off()
paths = sprintf('/dg-shared/for_omar/data/deepbind/cavalli/results_clean/%s.rds', SCORE_METHODS)
p = paths[1]
df = rbindlist( readRDS(p) )
head(df)
tf_data = readRDS('/dg-shared/for_omar/data/deepbind/cavalli/cavalli_tf_map.rds')
head(tf_data)
dim(df_data)
dim(tf_data)
length(tf_count)
source('~/Development/mutfunc/public/scripts/parse_muts.r')
source('~/Development/mutfunc/public/scripts/parse_muts.r')
NEW_TABLE
RMySQL::dbSendQuery(con, sprintf("CREATE INDEX mid_index %s (mid)", NEW_TABLE))
sprintf("CREATE INDEX mid_index %s (mid)", NEW_TABLE)
RMySQL::dbSendQuery(con, sprintf("CREATE INDEX mid_index ON %s (mid)", NEW_TABLE))
selfDropTable(JOB_ID, NEW_TABLE)
RMySQL::dbSendQuery(con, selfDropTable(JOB_ID, NEW_TABLE));
RMySQL::dbClearResult(RMySQL::dbListResults(con)[[1]]);
RMySQL::dbSendQuery(con, sprintf("ALTER TABLE %s COMMENT 'done'", NEW_TABLE));
source('~/Development/mutfunc/public/scripts/parse_muts.r')
RMySQL::dbSendQuery(con, sprintf("CREATE INDEX gene_index ON %s (gene)", TMP_TABLE_F  ));
TMP_TABLE_F
sprintf("CREATE INDEX gene_index ON %s (gene)", TMP_TABLE_F  )
RMySQL::dbSendQuery(con, sprintf("CREATE INDEX posaa_index ON %s (posaa,refaa)", TMP_TABLE_F  ));
RMySQL::dbSendQuery(con, sprintf("CREATE INDEX pos_index ON %s (pos,ref)", TMP_TABLE_F  ));
source('~/Development/mutfunc/public/scripts/parse_muts.r')
source('~/Development/mutfunc/public/scripts/parse_muts.r')
source('~/Development/mutfunc/public/scripts/parse_muts.r')
source('~/Development/lgo/run.r')
source('~/Development/lgo/run.r')
source('~/Development/lgo/run.r')
# Make weight matrix
pfm = makePFM(seqs)
seqs = ks$AURKB
method = 'bits'
letter_width=0.95
flip_order=F
# Make weight matrix
pfm = makePFM(seqs)
# Get height data
hh = getHeightData(pfm, method = method, decreasing = flip_order)
hh
head(hh)
ff = merge(sf_df, hh, by = 'letter')
head(ff)
# Scale x and ys
x_pad = letter_width/2
ff$x = newRange(ff$x, ff$position-x_pad, ff$position + x_pad)
ff$y = newRange(ff$y, ff$y0, ff$y1)
head(ff)
sf_df = readRDS('fonts/sf.rds')
sf = split(sf_df, sf_df$letter)
sf = lapply(sf, function(df){
df$order = 1:nrow(df)
df
})
sf_df = as.data.frame( rbindlist(sf) )
source('~/Development/lgo/run.r')
source('~/Development/lgo/run.r')
head(lay)
min(lay$x)
source('~/Development/lgo/run.r')
z
z + coord_cartesian(xlim=c(0.5, 15.5))
z + coord_cartesian(xlim=c(1, 15))
z + coord_cartesian(xlim=c(1, 15)) + coord_cartesian(xlim=c(2,7))
z + coord_cartesian(xlim=c(1, 15)) + coord_cartesian(xlim=c(1.5,7))
z + coord_cartesian(xlim=c(1, 15)) + coord_cartesian(xlim=c(1.9,7))
source('~/Development/lgo/run.r')
dev.off()
dev.off()
source('~/Development/colab/juri_310117/preprocess_muts.r')
subset(longest_iso, gene=='KMT2C')
head(longest_iso)
subset(longest_iso, gene=='KMT2C')
head(seqdf)
subset(seqdf, gene=='KMT2C')
source('~/Development/colab/juri_310117/preprocess_muts.r')
head(muts)
subset(muts, Gene.refGene=='KMT2C')
head(longest_iso)
x = split(muts2$trans_len, muts2$GeneDetail.refGene)
sapply(x, function(x) all(is.na(x)))
x[[1]]
x[[2]]
x = split(muts2$trans_len, muts2$Gene.refGene)
x$AKT1
sapply(x, function(x) all(is.na(x)))
sum(sapply(x, function(x) all(is.na(x))))
head(muts2)
subset(muts2, Gene.refGene=='KMT2C')
x = split(muts$trans_len, muts$Gene.refGene)
sum(sapply(x, function(x) all(is.na(x))))
sapply(x, function(x) all(is.na(x)))
which(sapply(x, function(x) all(is.na(x))))
length(x)
subset(muts2, Gene.refGene=='MLL3')
subset(muts, Gene.refGene=='MLL3')
subset(longest_iso, gene=='mll3')
subset(longest_iso, gene=='MLL3')
DNA_ALPHABET
ch = 'i'
fontfamily = 'SF UI Text'
fontsize=2400; dim=c(2000, 2000)
fontface = 2; do_thin=T
source('~/Development/lgo/fonts/img2poly.r')
#jpeg_tmpfile = function(f) tempfile(pattern = f, fileext=".jpg")
jpeg_tmpfile = function(f) paste0(f, ".jpg")
fname = jpeg_tmpfile("file1")
# Draw letter as jpeg
jpeg(filename=fname, width=dim[1], height=dim[2])
grid.newpage()
# Black rectangle
grid.rect(x = 0, y=0, width=3, height=3, gp=gpar(fill="black"), draw = TRUE, vp = NULL)
# Text ontop
grid.text(ch, 0.5,0.5, gp=gpar(fontsize=fontsize, fontfamily=fontfamily, col="white", fontface=fontface))
dev.off()
fname2 = jpeg_tmpfile("file2")
fname3 = jpeg_tmpfile("file3")
# Trim it all
system(sprintf('convert %s -fuzz 10%% -bordercolor black -trim %s', fname, fname2))
# Add border
system(sprintf('convert %s -shave 1x1 -bordercolor black -border 1 %s', fname2, fname3))
im = readJPEG(fname)
head(im)
dim(im)
dim[1]
dim(im)
im = readJPEG(fname3)
dim(im)
dim(im)[1]
nrow(im)
'l', 'j')){
pad = dim[1] * 0.30
pad
pad = dim[1] * 0.30
pad_mat = matrix(rep(0, nrow(im) * pad), ncol=pad)
pad = dim[1] * 0.30
pad_mat = matrix(rep(0, nrow(im) * pad), ncol=pad)
ch
if(ch %in% c('i', 'l', 'j')){
for(i in 1:3) im[,,i] = cbind(pad_mat, im[,,i], pad_mat)
}
dim(im)
im = readJPEG(fname3)
dim(im)
im[,,1]
im = readJPEG(fname3)
pad = dim[1] * 0.30
pad_mat = matrix(rep(0, nrow(im) * pad), ncol=pad)
im = cbind(pad_mat, im, pad_mat)
dim(im)
writeJPEG(im, 'x.jpg')
im = readJPEG(fname3)
if(do_thin & ch %in% c('i', 'l', 'j')){
pad = dim[1] * 0.40
pad_mat = matrix(rep(0, nrow(im) * pad), ncol=pad)
im = cbind(pad_mat, im, pad_mat)
}
writeJPEG(im, 'x.jpg')
ch = 'j'
#jpeg_tmpfile = function(f) tempfile(pattern = f, fileext=".jpg")
jpeg_tmpfile = function(f) paste0(f, ".jpg")
fname = jpeg_tmpfile("file1")
# Draw letter as jpeg
jpeg(filename=fname, width=dim[1], height=dim[2])
grid.newpage()
# Black rectangle
grid.rect(x = 0, y=0, width=3, height=3, gp=gpar(fill="black"), draw = TRUE, vp = NULL)
# Text ontop
grid.text(ch, 0.5,0.5, gp=gpar(fontsize=fontsize, fontfamily=fontfamily, col="white", fontface=fontface))
dev.off()
fname2 = jpeg_tmpfile("file2")
fname3 = jpeg_tmpfile("file3")
# Trim it all
system(sprintf('convert %s -fuzz 10%% -bordercolor black -trim %s', fname, fname2))
# Add border
system(sprintf('convert %s -shave 1x1 -bordercolor black -border 1 %s', fname2, fname3))
im = readJPEG(fname3)
if(do_thin & ch %in% c('i', 'l', 'j')){
pad = dim[1] * 0.40
pad_mat = matrix(rep(0, nrow(im) * pad), ncol=pad)
im = cbind(pad_mat, im, pad_mat)
}
im
fontsize
fontsize = 1200
#jpeg_tmpfile = function(f) tempfile(pattern = f, fileext=".jpg")
jpeg_tmpfile = function(f) paste0(f, ".jpg")
fname = jpeg_tmpfile("file1")
# Draw letter as jpeg
jpeg(filename=fname, width=dim[1], height=dim[2])
grid.newpage()
# Black rectangle
grid.rect(x = 0, y=0, width=3, height=3, gp=gpar(fill="black"), draw = TRUE, vp = NULL)
# Text ontop
grid.text(ch, 0.5,0.5, gp=gpar(fontsize=fontsize, fontfamily=fontfamily, col="white", fontface=fontface))
dev.off()
fname2 = jpeg_tmpfile("file2")
fname3 = jpeg_tmpfile("file3")
# Trim it all
system(sprintf('convert %s -fuzz 10%% -bordercolor black -trim %s', fname, fname2))
# Add border
system(sprintf('convert %s -shave 1x1 -bordercolor black -border 1 %s', fname2, fname3))
im = readJPEG(fname3)
if(do_thin & ch %in% c('i', 'l', 'j')){
pad = dim[1] * 0.40
pad_mat = matrix(rep(0, nrow(im) * pad), ncol=pad)
im = cbind(pad_mat, im, pad_mat)
}
im
fontsize
fontsize=1400
#jpeg_tmpfile = function(f) tempfile(pattern = f, fileext=".jpg")
jpeg_tmpfile = function(f) paste0(f, ".jpg")
fname = jpeg_tmpfile("file1")
# Draw letter as jpeg
jpeg(filename=fname, width=dim[1], height=dim[2])
grid.newpage()
# Black rectangle
grid.rect(x = 0, y=0, width=3, height=3, gp=gpar(fill="black"), draw = TRUE, vp = NULL)
# Text ontop
grid.text(ch, 0.5,0.5, gp=gpar(fontsize=fontsize, fontfamily=fontfamily, col="white", fontface=fontface))
dev.off()
fname2 = jpeg_tmpfile("file2")
fname3 = jpeg_tmpfile("file3")
# Trim it all
system(sprintf('convert %s -fuzz 10%% -bordercolor black -trim %s', fname, fname2))
# Add border
system(sprintf('convert %s -shave 1x1 -bordercolor black -border 1 %s', fname2, fname3))
im = readJPEG(fname3)
if(do_thin & ch %in% c('i', 'l', 'j')){
pad = dim[1] * 0.40
pad_mat = matrix(rep(0, nrow(im) * pad), ncol=pad)
im = cbind(pad_mat, im, pad_mat)
}
writeJPEG(im, 'x.jpg')
strwidth('j')
plot.new()
strwidth('j')
plot.new()
strwidth('j')
strwidth('i')
im = readJPEG(fname3)
if(do_thin & ch %in% c('i', 'l', 'j')){
pad = dim[1] * 0.30
pad_mat = matrix(rep(0, nrow(im) * pad), ncol=pad)
im = cbind(pad_mat, im, pad_mat)
}
writeJPEG(im, 'x.jpg')
plot.new()
strwidth(letters)
x = strwidth(letters)
names(x) = letters
sort(x)
dim(im)
x = im
x[,,1] = im
array(im, dim = c(dim(im), 3))
ar = array(0, dim = c(dim(im), 3))
dim(ar)
source('~/Development/lgo/fonts/img2poly.r')
x = readRDS('1_SF.rds')
head(x)
dim(x)
x
tail(x)
z= subset(z, letter %in% c('i', 'j', 'R', 'A'))
z= subset(z, z$letter %in% c('i', 'j', 'R', 'A'))
head(z)
head(z)
head(x)
x$letter
table(x$letter)
subset(z, letter == 'i')
letter
z = x
subset(z, letter == 'i')
z= subset(x, x$letter %in% c('i', 'j', 'R', 'A'))
z= subset(x, letter %in% c('i', 'j', 'R', 'A'))
head(z)
ggplot(z) + geom_logo(aes(x, y, group=intersect(group, letter)))
ggplot(z) + geom_logo(aes(x, y, group=interaction(group, letter))) +facet_wrap(~letter)
ggplot(z) + geom_logo(aes(x, y, group=paste(x$group, x$letter))) +facet_wrap(~letter)
ggplot(z) + geom_logo(aes(x, y, group=paste(x$group, x$letter)))
ggplot(z) + geom_logo(aes(x, y, group=paste(x$group, x$letter)))
ggplot(z) + geom_poly(aes(x, y, group=paste(x$group, x$letter)))
ggplot(z) + geom_polygon(aes(x, y, group=paste(x$group, x$letter)))
ggplot(z) + geom_polygon(aes(x, y, group=interaction(group, letter))) +facet_wrap(~letter)
x = readRDS('1_SF.rds')
ggplot(x) + geom_polygon(aes(x, y, group=interaction(group, letter))) +facet_wrap(~letter)
ggplot(x) + geom_polygon(aes(x, y, group=interaction(group, letter), fill=letter)) +facet_wrap(~letter)
ggplot(x) + geom_polygon(aes(x, y, group= paste(group, letter), fill=letter)) +facet_wrap(~letter)
head(x)
source('~/Development/lgo/fonts/img2poly.r')
ggplot(x) + geom_polygon(aes(x, y, group= paste(letter), fill=letter)) +facet_wrap(~letter)
source('~/Development/lgo/fonts/img2poly.r')
source('~/Development/lgo/fonts/img2poly.r')
x = readRDS('1_SF.rds')
ggplot(x) + geom_polygon(aes(x, y, group= paste(letter), fill=letter)) +facet_wrap(~letter)
ggplot(x) + geom_polygon(aes(x, y, group= paste(letter), fill=letter)) +facet_grid(~letter)
ggplot(x) + geom_polygon(aes(x, y, group= paste(letter), fill=letter)) +facet_wrap(~letter)
source('~/Development/lgo/fonts/img2poly.r')
ggplot(x) + geom_polygon(aes(x, y, group= paste(letter), fill=letter)) +facet_wrap(~letter)
ggplot(x) + geom_polygon(aes(x, y, group= paste(letter), fill=letter)) +facet_wrap(~letter)
x = readRDS('1_SF.rds')
ggplot(x) + geom_polygon(aes(x, y, group= paste(letter), fill=letter)) +facet_wrap(~letter)
source('~/Development/lgo/fonts/img2poly.r')
x = readRDS('1_SF.rds')
ggplot(x) + geom_polygon(aes(x, y, group= paste(letter), fill=letter)) +facet_wrap(~letter)
source('~/Development/lgo/fonts/img2poly.r')
x = readRDS('1_SF.rds')
ggplot(x) + geom_polygon(aes(x, y, group= paste(letter), fill=letter)) +facet_wrap(~letter)
source('~/Development/lgo/fonts/img2poly.r')
source('~/Development/lgo/fonts/img2poly.r')
AA_ALPHABET
x = readRDS('1_SF.rds')
head(x)
setwd('~/Development/lgo/')
source('~/Development/lgo/R/main.r')
source('~/Development/lgo/R/main.r')
source('~/Development/lgo/R/main.r')
ggplot() + geom_logo(ks$AURKB)
source('~/Development/lgo/R/main.r')
ggplot() + geom_logo(ks$AURKB)
source('~/Development/lgo/R/main.r')
ggplot() + geom_logo(ks$AURKB)
source('~/Development/lgo/R/main.r')
ggplot() + geom_logo(ks$AURKB)
require(devtools)
document()
document()
document()
